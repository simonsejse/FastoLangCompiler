// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )


# 26 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LCURLY of (Position)
  | RCURLY of (Position)
  | EOF of (Position)
  | COMMA of (Position)
  | SEMICOLON of (Position)
  | EQ of (Position)
  | ARROW of (Position)
  | LPAR of (Position)
  | RPAR of (Position)
  | LBRACKET of (Position)
  | RBRACKET of (Position)
  | MINUS of (Position)
  | PLUS of (Position)
  | TIMES of (Position)
  | DIVIDE of (Position)
  | DEQ of (Position)
  | LTH of (Position)
  | IOTA of (Position)
  | LENGTH of (Position)
  | MAP of (Position)
  | READ of (Position)
  | REDUCE of (Position)
  | WRITE of (Position)
  | BOOL of (Position)
  | CHAR of (Position)
  | ELSE of (Position)
  | FN of (Position)
  | FUN of (Position)
  | IF of (Position)
  | IN of (Position)
  | INT of (Position)
  | LET of (Position)
  | THEN of (Position)
  | TRUE of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | CHARLIT of (char * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_DEQ
    | TOKEN_LTH
    | TOKEN_IOTA
    | TOKEN_LENGTH
    | TOKEN_MAP
    | TOKEN_READ
    | TOKEN_REDUCE
    | TOKEN_WRITE
    | TOKEN_BOOL
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_INT
    | TOKEN_LET
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_CHARLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_FunDecs
    | NONTERM_Fun
    | NONTERM_Type
    | NONTERM_Params
    | NONTERM_Exp
    | NONTERM_Exps
    | NONTERM_FunArg

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LCURLY _ -> 0 
  | RCURLY _ -> 1 
  | EOF _ -> 2 
  | COMMA _ -> 3 
  | SEMICOLON _ -> 4 
  | EQ _ -> 5 
  | ARROW _ -> 6 
  | LPAR _ -> 7 
  | RPAR _ -> 8 
  | LBRACKET _ -> 9 
  | RBRACKET _ -> 10 
  | MINUS _ -> 11 
  | PLUS _ -> 12 
  | TIMES _ -> 13 
  | DIVIDE _ -> 14 
  | DEQ _ -> 15 
  | LTH _ -> 16 
  | IOTA _ -> 17 
  | LENGTH _ -> 18 
  | MAP _ -> 19 
  | READ _ -> 20 
  | REDUCE _ -> 21 
  | WRITE _ -> 22 
  | BOOL _ -> 23 
  | CHAR _ -> 24 
  | ELSE _ -> 25 
  | FN _ -> 26 
  | FUN _ -> 27 
  | IF _ -> 28 
  | IN _ -> 29 
  | INT _ -> 30 
  | LET _ -> 31 
  | THEN _ -> 32 
  | TRUE _ -> 33 
  | ID _ -> 34 
  | STRINGLIT _ -> 35 
  | CHARLIT _ -> 36 
  | NUM _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LCURLY 
  | 1 -> TOKEN_RCURLY 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_COMMA 
  | 4 -> TOKEN_SEMICOLON 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_ARROW 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_RPAR 
  | 9 -> TOKEN_LBRACKET 
  | 10 -> TOKEN_RBRACKET 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_TIMES 
  | 14 -> TOKEN_DIVIDE 
  | 15 -> TOKEN_DEQ 
  | 16 -> TOKEN_LTH 
  | 17 -> TOKEN_IOTA 
  | 18 -> TOKEN_LENGTH 
  | 19 -> TOKEN_MAP 
  | 20 -> TOKEN_READ 
  | 21 -> TOKEN_REDUCE 
  | 22 -> TOKEN_WRITE 
  | 23 -> TOKEN_BOOL 
  | 24 -> TOKEN_CHAR 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_FN 
  | 27 -> TOKEN_FUN 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_IN 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_LET 
  | 32 -> TOKEN_THEN 
  | 33 -> TOKEN_TRUE 
  | 34 -> TOKEN_ID 
  | 35 -> TOKEN_STRINGLIT 
  | 36 -> TOKEN_CHARLIT 
  | 37 -> TOKEN_NUM 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_FunDecs 
    | 3 -> NONTERM_FunDecs 
    | 4 -> NONTERM_Fun 
    | 5 -> NONTERM_Fun 
    | 6 -> NONTERM_Type 
    | 7 -> NONTERM_Type 
    | 8 -> NONTERM_Type 
    | 9 -> NONTERM_Type 
    | 10 -> NONTERM_Params 
    | 11 -> NONTERM_Params 
    | 12 -> NONTERM_Exp 
    | 13 -> NONTERM_Exp 
    | 14 -> NONTERM_Exp 
    | 15 -> NONTERM_Exp 
    | 16 -> NONTERM_Exp 
    | 17 -> NONTERM_Exp 
    | 18 -> NONTERM_Exp 
    | 19 -> NONTERM_Exp 
    | 20 -> NONTERM_Exp 
    | 21 -> NONTERM_Exp 
    | 22 -> NONTERM_Exp 
    | 23 -> NONTERM_Exp 
    | 24 -> NONTERM_Exp 
    | 25 -> NONTERM_Exp 
    | 26 -> NONTERM_Exp 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_Exps 
    | 35 -> NONTERM_Exps 
    | 36 -> NONTERM_FunArg 
    | 37 -> NONTERM_FunArg 
    | 38 -> NONTERM_FunArg 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LCURLY _ -> "LCURLY" 
  | RCURLY _ -> "RCURLY" 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | EQ _ -> "EQ" 
  | ARROW _ -> "ARROW" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | LBRACKET _ -> "LBRACKET" 
  | RBRACKET _ -> "RBRACKET" 
  | MINUS _ -> "MINUS" 
  | PLUS _ -> "PLUS" 
  | TIMES _ -> "TIMES" 
  | DIVIDE _ -> "DIVIDE" 
  | DEQ _ -> "DEQ" 
  | LTH _ -> "LTH" 
  | IOTA _ -> "IOTA" 
  | LENGTH _ -> "LENGTH" 
  | MAP _ -> "MAP" 
  | READ _ -> "READ" 
  | REDUCE _ -> "REDUCE" 
  | WRITE _ -> "WRITE" 
  | BOOL _ -> "BOOL" 
  | CHAR _ -> "CHAR" 
  | ELSE _ -> "ELSE" 
  | FN _ -> "FN" 
  | FUN _ -> "FUN" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | INT _ -> "INT" 
  | LET _ -> "LET" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | CHARLIT _ -> "CHARLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIVIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IOTA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LENGTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | READ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REDUCE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRITE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;1us;65535us;4us;5us;7us;65535us;4us;7us;9us;23us;20us;21us;25us;23us;69us;70us;100us;101us;102us;23us;3us;65535us;9us;10us;25us;26us;102us;105us;25us;65535us;12us;13us;15us;16us;31us;52us;55us;34us;56us;35us;57us;36us;58us;37us;59us;38us;60us;39us;61us;40us;62us;41us;63us;42us;64us;52us;73us;43us;76us;44us;81us;45us;86us;46us;87us;47us;89us;48us;93us;49us;94us;50us;95us;51us;97us;52us;104us;53us;107us;54us;3us;65535us;31us;32us;64us;65us;97us;98us;2us;65535us;79us;80us;84us;85us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;8us;16us;20us;46us;50us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;2us;4us;5us;2us;4us;5us;2us;4us;5us;1us;4us;1us;4us;1us;4us;7us;4us;17us;18us;19us;20us;21us;22us;1us;5us;1us;5us;7us;5us;17us;18us;19us;20us;21us;22us;1us;6us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;2us;10us;11us;1us;10us;1us;10us;1us;12us;1us;13us;4us;14us;24us;25us;33us;1us;15us;1us;16us;1us;16us;1us;16us;7us;17us;17us;18us;19us;20us;21us;22us;7us;17us;18us;18us;19us;20us;21us;22us;7us;17us;18us;19us;19us;20us;21us;22us;7us;17us;18us;19us;20us;20us;21us;22us;7us;17us;18us;19us;20us;21us;21us;22us;7us;17us;18us;19us;20us;21us;22us;22us;7us;17us;18us;19us;20us;21us;22us;23us;7us;17us;18us;19us;20us;21us;22us;23us;7us;17us;18us;19us;20us;21us;22us;23us;7us;17us;18us;19us;20us;21us;22us;27us;7us;17us;18us;19us;20us;21us;22us;28us;7us;17us;18us;19us;20us;21us;22us;29us;7us;17us;18us;19us;20us;21us;22us;30us;7us;17us;18us;19us;20us;21us;22us;30us;7us;17us;18us;19us;20us;21us;22us;31us;7us;17us;18us;19us;20us;21us;22us;32us;7us;17us;18us;19us;20us;21us;22us;32us;7us;17us;18us;19us;20us;21us;22us;33us;8us;17us;18us;19us;20us;21us;22us;34us;35us;7us;17us;18us;19us;20us;21us;22us;37us;7us;17us;18us;19us;20us;21us;22us;38us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;23us;1us;23us;2us;24us;25us;1us;24us;1us;24us;1us;25us;1us;26us;1us;26us;1us;26us;1us;26us;1us;27us;1us;27us;1us;27us;1us;28us;1us;28us;1us;28us;1us;29us;1us;29us;1us;29us;1us;29us;1us;29us;1us;30us;1us;30us;1us;30us;1us;30us;1us;30us;1us;30us;1us;31us;1us;31us;1us;32us;1us;32us;1us;32us;1us;32us;1us;33us;1us;33us;1us;34us;1us;34us;1us;36us;2us;37us;38us;2us;37us;38us;2us;37us;38us;1us;37us;1us;37us;1us;38us;1us;38us;1us;38us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;14us;16us;19us;22us;25us;27us;29us;31us;39us;41us;43us;51us;53us;55us;57us;59us;61us;63us;66us;69us;71us;73us;75us;77us;82us;84us;86us;88us;90us;98us;106us;114us;122us;130us;138us;146us;154us;162us;170us;178us;186us;194us;202us;210us;218us;226us;234us;243us;251us;259us;261us;263us;265us;267us;269us;271us;273us;275us;277us;280us;282us;284us;286us;288us;290us;292us;294us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;330us;332us;334us;336us;338us;340us;342us;344us;346us;348us;350us;353us;356us;359us;361us;363us;365us;367us;|]
let _fsyacc_action_rows = 108
let _fsyacc_actionTableElements = [|1us;32768us;27us;4us;0us;49152us;1us;32768us;2us;3us;0us;16385us;4us;32768us;9us;20us;23us;19us;24us;18us;30us;17us;1us;16387us;27us;4us;0us;16386us;1us;32768us;34us;8us;1us;32768us;7us;9us;5us;32768us;8us;14us;9us;20us;23us;19us;24us;18us;30us;17us;1us;32768us;8us;11us;1us;32768us;5us;12us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;6us;16388us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;1us;32768us;5us;15us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;6us;16389us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;0us;16390us;0us;16391us;0us;16392us;4us;32768us;9us;20us;23us;19us;24us;18us;30us;17us;1us;32768us;10us;22us;0us;16393us;1us;32768us;34us;24us;1us;16395us;3us;25us;4us;32768us;9us;20us;23us;19us;24us;18us;30us;17us;0us;16394us;0us;16396us;0us;16397us;2us;16398us;7us;64us;9us;95us;0us;16399us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;1us;32768us;1us;33us;0us;16400us;0us;16401us;0us;16402us;0us;16403us;0us;16404us;4us;16405us;11us;56us;12us;55us;13us;57us;14us;58us;4us;16406us;11us;56us;12us;55us;13us;57us;14us;58us;7us;32768us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;32us;62us;7us;32768us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;25us;63us;6us;16407us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;8us;74us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;8us;77us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;8us;82us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;3us;87us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;8us;88us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;8us;90us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;29us;94us;6us;16416us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;32768us;10us;96us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;7us;16419us;3us;97us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;6us;16421us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;6us;16422us;11us;56us;12us;55us;13us;57us;14us;58us;15us;59us;16us;60us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;14us;32768us;0us;31us;7us;89us;8us;67us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;1us;32768us;8us;66us;0us;16408us;0us;16409us;1us;32768us;7us;69us;4us;32768us;9us;20us;23us;19us;24us;18us;30us;17us;1us;32768us;8us;71us;0us;16410us;1us;32768us;7us;73us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16411us;1us;32768us;7us;76us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16412us;1us;32768us;7us;79us;2us;32768us;26us;100us;34us;99us;1us;32768us;3us;81us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16413us;1us;32768us;7us;84us;2us;32768us;26us;100us;34us;99us;1us;32768us;3us;86us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16414us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16415us;1us;32768us;34us;92us;1us;32768us;5us;93us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16417us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;0us;16418us;0us;16420us;4us;32768us;9us;20us;23us;19us;24us;18us;30us;17us;1us;32768us;7us;102us;5us;32768us;8us;103us;9us;20us;23us;19us;24us;18us;30us;17us;1us;32768us;6us;104us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;1us;32768us;8us;106us;1us;32768us;6us;107us;13us;32768us;0us;31us;7us;89us;17us;75us;19us;78us;20us;68us;21us;83us;22us;72us;28us;61us;31us;91us;34us;29us;35us;30us;36us;28us;37us;27us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;11us;13us;14us;16us;18us;24us;26us;28us;42us;49us;51us;65us;72us;73us;74us;75us;80us;82us;83us;85us;87us;92us;93us;94us;95us;98us;99us;113us;115us;116us;117us;118us;119us;120us;125us;130us;138us;146us;153us;161us;169us;177us;185us;193us;201us;209us;216us;224us;232us;239us;246us;260us;274us;288us;302us;316us;330us;344us;358us;372us;387us;389us;390us;391us;393us;398us;400us;401us;403us;417us;418us;420us;434us;435us;437us;440us;442us;456us;457us;459us;462us;464us;478us;492us;493us;507us;508us;510us;512us;526us;540us;554us;555us;569us;570us;571us;576us;578us;584us;586us;600us;602us;604us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;2us;7us;6us;1us;1us;1us;3us;4us;2us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;6us;4us;3us;4us;4us;4us;6us;8us;3us;6us;4us;3us;1us;1us;6us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;7us;8us;8us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;65535us;16394us;16396us;16397us;65535us;16399us;65535us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;16409us;65535us;65535us;65535us;16410us;65535us;65535us;16411us;65535us;65535us;16412us;65535us;65535us;65535us;65535us;16413us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;16415us;65535us;65535us;65535us;65535us;65535us;16417us;65535us;16418us;16420us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 349 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedProg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 358 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedFunDec list in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsp"
                                               _1 
                   )
# 68 "Parser.fsp"
                 : AbSyn.UntypedProg));
# 370 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunDec list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsp"
                                                 _2 :: _3 
                   )
# 71 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 383 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsp"
                                                 _2 :: [] 
                   )
# 72 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsp"
                                  FunDec (fst _2, _1, _4, _7, snd _2) 
                   )
# 76 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsp"
                                  FunDec (fst _2, _1, [], _6, snd _2) 
                   )
# 78 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 428 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsp"
                                                       AbSyn.Int 
                   )
# 81 "Parser.fsp"
                 : AbSyn.Type));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsp"
                                                       AbSyn.Char 
                   )
# 82 "Parser.fsp"
                 : AbSyn.Type));
# 450 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsp"
                                                       AbSyn.Bool 
                   )
# 83 "Parser.fsp"
                 : AbSyn.Type));
# 461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsp"
                                                       AbSyn.Array _2 
                   )
# 84 "Parser.fsp"
                 : AbSyn.Type));
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsp"
                                              Param (fst _2, _1) :: _4 
                   )
# 88 "Parser.fsp"
                 : 'gentype_Params));
# 488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsp"
                                              Param (fst _2, _1) :: [] 
                   )
# 89 "Parser.fsp"
                 : 'gentype_Params));
# 500 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsp"
                                            Constant (IntVal (fst _1), snd _1) 
                   )
# 97 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> char * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsp"
                                            Constant (CharVal (fst _1), snd _1) 
                   )
# 98 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsp"
                                            Var _1 
                   )
# 99 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 533 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsp"
                                            StringLit _1 
                   )
# 100 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 544 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp list in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsp"
                                            ArrayLit (_2, (), _1) 
                   )
# 102 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 557 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsp"
                                            Plus (_1, _3, _2) 
                   )
# 103 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsp"
                                            Minus(_1, _3, _2) 
                   )
# 104 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 583 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsp"
                                            Times(_1, _3, _2) 
                   )
# 105 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsp"
                                             Divide(_1, _3, _2) 
                   )
# 106 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 609 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsp"
                                            Equal(_1, _3, _2) 
                   )
# 107 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsp"
                                            Less (_1, _3, _2) 
                   )
# 108 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 635 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsp"
                                            If (_2, _4, _6, _1) 
                   )
# 110 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 651 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsp"
                                            Apply (fst _1, _3, snd _1) 
                   )
# 112 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 665 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsp"
                                            Apply (fst _1, [], snd _1) 
                   )
# 113 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 678 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.Type in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsp"
                                            Read (_3, _1) 
                   )
# 115 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 692 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsp"
                                            Write (_3, (), _1) 
                   )
# 117 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 706 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsp"
                                            Iota (_3, _1) 
                   )
# 119 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 720 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsp"
                                            Map (_3, _5, (), (), _1) 
                   )
# 121 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 736 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            let _8 = parseState.GetInput(8) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsp"
                                            Reduce (_3, _5, _7, (), _1) 
                   )
# 123 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 754 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsp"
                                            _2 
                   )
# 124 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 767 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsp"
                                            Let (Dec (fst _2, _4, _3), _6, _1) 
                   )
# 127 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 783 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsp"
                                            Index (fst _1, _3, (), _2) 
                   )
# 129 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 797 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsp"
                                             _1 :: _3 
                   )
# 132 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 810 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsp"
                                             _1 :: [] 
                   )
# 133 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 821 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsp"
                                      FunName (fst _1 ) 
                   )
# 136 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsp"
                                      Lambda (_2, [], _6, _1) 
                   )
# 138 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 848 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsp"
                                      Lambda (_2, _4, _7, _1) 
                   )
# 140 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
|]
# 866 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.UntypedProg =
    engine lexer lexbuf 0 :?> _
