// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )


# 26 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | AND of (Position)
  | OR of (Position)
  | NEG of (Position)
  | LCURLY of (Position)
  | RCURLY of (Position)
  | EOF of (Position)
  | COMMA of (Position)
  | SEMICOLON of (Position)
  | EQ of (Position)
  | ARROW of (Position)
  | LPAR of (Position)
  | RPAR of (Position)
  | LBRACKET of (Position)
  | RBRACKET of (Position)
  | MINUS of (Position)
  | PLUS of (Position)
  | TIMES of (Position)
  | DIVIDE of (Position)
  | DEQ of (Position)
  | LTH of (Position)
  | IOTA of (Position)
  | LENGTH of (Position)
  | MAP of (Position)
  | READ of (Position)
  | REDUCE of (Position)
  | WRITE of (Position)
  | NOT of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | BOOL of (Position)
  | CHAR of (Position)
  | ELSE of (Position)
  | FN of (Position)
  | FUN of (Position)
  | IF of (Position)
  | IN of (Position)
  | INT of (Position)
  | LET of (Position)
  | THEN of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | CHARLIT of (char * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_DEQ
    | TOKEN_LTH
    | TOKEN_IOTA
    | TOKEN_LENGTH
    | TOKEN_MAP
    | TOKEN_READ
    | TOKEN_REDUCE
    | TOKEN_WRITE
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BOOL
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_INT
    | TOKEN_LET
    | TOKEN_THEN
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_CHARLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_FunDecs
    | NONTERM_Fun
    | NONTERM_Type
    | NONTERM_Params
    | NONTERM_LetDecls
    | NONTERM_LetDecl
    | NONTERM_Exp
    | NONTERM_Exps
    | NONTERM_FunArg

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | AND _ -> 0 
  | OR _ -> 1 
  | NEG _ -> 2 
  | LCURLY _ -> 3 
  | RCURLY _ -> 4 
  | EOF _ -> 5 
  | COMMA _ -> 6 
  | SEMICOLON _ -> 7 
  | EQ _ -> 8 
  | ARROW _ -> 9 
  | LPAR _ -> 10 
  | RPAR _ -> 11 
  | LBRACKET _ -> 12 
  | RBRACKET _ -> 13 
  | MINUS _ -> 14 
  | PLUS _ -> 15 
  | TIMES _ -> 16 
  | DIVIDE _ -> 17 
  | DEQ _ -> 18 
  | LTH _ -> 19 
  | IOTA _ -> 20 
  | LENGTH _ -> 21 
  | MAP _ -> 22 
  | READ _ -> 23 
  | REDUCE _ -> 24 
  | WRITE _ -> 25 
  | NOT _ -> 26 
  | TRUE _ -> 27 
  | FALSE _ -> 28 
  | BOOL _ -> 29 
  | CHAR _ -> 30 
  | ELSE _ -> 31 
  | FN _ -> 32 
  | FUN _ -> 33 
  | IF _ -> 34 
  | IN _ -> 35 
  | INT _ -> 36 
  | LET _ -> 37 
  | THEN _ -> 38 
  | ID _ -> 39 
  | STRINGLIT _ -> 40 
  | CHARLIT _ -> 41 
  | NUM _ -> 42 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_AND 
  | 1 -> TOKEN_OR 
  | 2 -> TOKEN_NEG 
  | 3 -> TOKEN_LCURLY 
  | 4 -> TOKEN_RCURLY 
  | 5 -> TOKEN_EOF 
  | 6 -> TOKEN_COMMA 
  | 7 -> TOKEN_SEMICOLON 
  | 8 -> TOKEN_EQ 
  | 9 -> TOKEN_ARROW 
  | 10 -> TOKEN_LPAR 
  | 11 -> TOKEN_RPAR 
  | 12 -> TOKEN_LBRACKET 
  | 13 -> TOKEN_RBRACKET 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIVIDE 
  | 18 -> TOKEN_DEQ 
  | 19 -> TOKEN_LTH 
  | 20 -> TOKEN_IOTA 
  | 21 -> TOKEN_LENGTH 
  | 22 -> TOKEN_MAP 
  | 23 -> TOKEN_READ 
  | 24 -> TOKEN_REDUCE 
  | 25 -> TOKEN_WRITE 
  | 26 -> TOKEN_NOT 
  | 27 -> TOKEN_TRUE 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_BOOL 
  | 30 -> TOKEN_CHAR 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_FN 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_IF 
  | 35 -> TOKEN_IN 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_LET 
  | 38 -> TOKEN_THEN 
  | 39 -> TOKEN_ID 
  | 40 -> TOKEN_STRINGLIT 
  | 41 -> TOKEN_CHARLIT 
  | 42 -> TOKEN_NUM 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_FunDecs 
    | 3 -> NONTERM_FunDecs 
    | 4 -> NONTERM_Fun 
    | 5 -> NONTERM_Fun 
    | 6 -> NONTERM_Type 
    | 7 -> NONTERM_Type 
    | 8 -> NONTERM_Type 
    | 9 -> NONTERM_Type 
    | 10 -> NONTERM_Params 
    | 11 -> NONTERM_Params 
    | 12 -> NONTERM_LetDecls 
    | 13 -> NONTERM_LetDecls 
    | 14 -> NONTERM_LetDecl 
    | 15 -> NONTERM_Exp 
    | 16 -> NONTERM_Exp 
    | 17 -> NONTERM_Exp 
    | 18 -> NONTERM_Exp 
    | 19 -> NONTERM_Exp 
    | 20 -> NONTERM_Exp 
    | 21 -> NONTERM_Exp 
    | 22 -> NONTERM_Exp 
    | 23 -> NONTERM_Exp 
    | 24 -> NONTERM_Exp 
    | 25 -> NONTERM_Exp 
    | 26 -> NONTERM_Exp 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_Exp 
    | 35 -> NONTERM_Exp 
    | 36 -> NONTERM_Exp 
    | 37 -> NONTERM_Exp 
    | 38 -> NONTERM_Exp 
    | 39 -> NONTERM_Exp 
    | 40 -> NONTERM_Exp 
    | 41 -> NONTERM_Exp 
    | 42 -> NONTERM_Exp 
    | 43 -> NONTERM_Exps 
    | 44 -> NONTERM_Exps 
    | 45 -> NONTERM_FunArg 
    | 46 -> NONTERM_FunArg 
    | 47 -> NONTERM_FunArg 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | AND _ -> "AND" 
  | OR _ -> "OR" 
  | NEG _ -> "NEG" 
  | LCURLY _ -> "LCURLY" 
  | RCURLY _ -> "RCURLY" 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | EQ _ -> "EQ" 
  | ARROW _ -> "ARROW" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | LBRACKET _ -> "LBRACKET" 
  | RBRACKET _ -> "RBRACKET" 
  | MINUS _ -> "MINUS" 
  | PLUS _ -> "PLUS" 
  | TIMES _ -> "TIMES" 
  | DIVIDE _ -> "DIVIDE" 
  | DEQ _ -> "DEQ" 
  | LTH _ -> "LTH" 
  | IOTA _ -> "IOTA" 
  | LENGTH _ -> "LENGTH" 
  | MAP _ -> "MAP" 
  | READ _ -> "READ" 
  | REDUCE _ -> "REDUCE" 
  | WRITE _ -> "WRITE" 
  | NOT _ -> "NOT" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | BOOL _ -> "BOOL" 
  | CHAR _ -> "CHAR" 
  | ELSE _ -> "ELSE" 
  | FN _ -> "FN" 
  | FUN _ -> "FUN" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | INT _ -> "INT" 
  | LET _ -> "LET" 
  | THEN _ -> "THEN" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | CHARLIT _ -> "CHARLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEG _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIVIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IOTA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LENGTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | READ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REDUCE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRITE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;1us;65535us;4us;5us;7us;65535us;4us;7us;9us;23us;20us;21us;25us;23us;79us;80us;110us;111us;112us;23us;3us;65535us;9us;10us;25us;26us;112us;115us;0us;65535us;0us;65535us;29us;65535us;12us;13us;15us;16us;33us;58us;61us;36us;62us;37us;63us;38us;64us;39us;65us;40us;66us;41us;67us;42us;68us;43us;69us;44us;70us;45us;71us;46us;72us;47us;73us;48us;74us;58us;83us;49us;86us;50us;91us;51us;96us;52us;97us;53us;99us;54us;103us;55us;104us;56us;105us;57us;107us;58us;114us;59us;117us;60us;3us;65535us;33us;34us;74us;75us;107us;108us;2us;65535us;89us;90us;94us;95us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;8us;16us;20us;21us;22us;52us;56us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;2us;4us;5us;2us;4us;5us;2us;4us;5us;1us;4us;1us;4us;1us;4us;9us;4us;22us;23us;24us;25us;26us;27us;28us;29us;1us;5us;1us;5us;9us;5us;22us;23us;24us;25us;26us;27us;28us;29us;1us;6us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;2us;10us;11us;1us;10us;1us;10us;1us;15us;1us;16us;4us;17us;33us;34us;42us;1us;18us;1us;19us;1us;20us;1us;21us;1us;21us;1us;21us;9us;22us;22us;23us;24us;25us;26us;27us;28us;29us;9us;22us;23us;23us;24us;25us;26us;27us;28us;29us;9us;22us;23us;24us;24us;25us;26us;27us;28us;29us;9us;22us;23us;24us;25us;25us;26us;27us;28us;29us;9us;22us;23us;24us;25us;26us;26us;27us;28us;29us;9us;22us;23us;24us;25us;26us;27us;27us;28us;29us;9us;22us;23us;24us;25us;26us;27us;28us;28us;29us;9us;22us;23us;24us;25us;26us;27us;28us;29us;29us;9us;22us;23us;24us;25us;26us;27us;28us;29us;30us;9us;22us;23us;24us;25us;26us;27us;28us;29us;31us;9us;22us;23us;24us;25us;26us;27us;28us;29us;32us;9us;22us;23us;24us;25us;26us;27us;28us;29us;32us;9us;22us;23us;24us;25us;26us;27us;28us;29us;32us;9us;22us;23us;24us;25us;26us;27us;28us;29us;36us;9us;22us;23us;24us;25us;26us;27us;28us;29us;37us;9us;22us;23us;24us;25us;26us;27us;28us;29us;38us;9us;22us;23us;24us;25us;26us;27us;28us;29us;39us;9us;22us;23us;24us;25us;26us;27us;28us;29us;39us;9us;22us;23us;24us;25us;26us;27us;28us;29us;40us;9us;22us;23us;24us;25us;26us;27us;28us;29us;41us;9us;22us;23us;24us;25us;26us;27us;28us;29us;41us;9us;22us;23us;24us;25us;26us;27us;28us;29us;42us;10us;22us;23us;24us;25us;26us;27us;28us;29us;43us;44us;9us;22us;23us;24us;25us;26us;27us;28us;29us;46us;9us;22us;23us;24us;25us;26us;27us;28us;29us;47us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;32us;1us;32us;1us;32us;2us;33us;34us;1us;33us;1us;33us;1us;34us;1us;35us;1us;35us;1us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;37us;1us;38us;1us;38us;1us;38us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;39us;1us;39us;1us;39us;1us;40us;1us;40us;1us;41us;1us;41us;1us;41us;1us;41us;1us;42us;1us;42us;1us;43us;1us;43us;1us;45us;2us;46us;47us;2us;46us;47us;2us;46us;47us;1us;46us;1us;46us;1us;47us;1us;47us;1us;47us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;14us;16us;19us;22us;25us;27us;29us;31us;41us;43us;45us;55us;57us;59us;61us;63us;65us;67us;70us;73us;75us;77us;79us;81us;86us;88us;90us;92us;94us;96us;98us;108us;118us;128us;138us;148us;158us;168us;178us;188us;198us;208us;218us;228us;238us;248us;258us;268us;278us;288us;298us;308us;318us;329us;339us;349us;351us;353us;355us;357us;359us;361us;363us;365us;367us;369us;371us;373us;375us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;451us;454us;457us;459us;461us;463us;465us;|]
let _fsyacc_action_rows = 118
let _fsyacc_actionTableElements = [|1us;32768us;33us;4us;0us;49152us;1us;32768us;5us;3us;0us;16385us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;16387us;33us;4us;0us;16386us;1us;32768us;39us;8us;1us;32768us;10us;9us;5us;32768us;11us;14us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;11us;11us;1us;32768us;8us;12us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;8us;16388us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;1us;32768us;8us;15us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;8us;16389us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;0us;16390us;0us;16391us;0us;16392us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;13us;22us;0us;16393us;1us;32768us;39us;24us;1us;16395us;6us;25us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;0us;16394us;0us;16399us;0us;16400us;2us;16401us;10us;74us;12us;105us;0us;16402us;0us;16403us;0us;16404us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;1us;32768us;4us;35us;0us;16405us;0us;16406us;0us;16407us;0us;16408us;0us;16409us;4us;16410us;14us;62us;15us;61us;16us;63us;17us;64us;4us;16411us;14us;62us;15us;61us;16us;63us;17us;64us;6us;16412us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;7us;16413us;0us;67us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;0us;16414us;0us;16415us;9us;32768us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;38us;72us;9us;32768us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;31us;73us;8us;16416us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;11us;84us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;11us;87us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;11us;92us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;6us;97us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;11us;98us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;11us;100us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;35us;104us;8us;16425us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;32768us;0us;67us;1us;68us;13us;106us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;9us;16428us;0us;67us;1us;68us;6us;107us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;8us;16430us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;8us;16431us;0us;67us;1us;68us;14us;62us;15us;61us;16us;63us;17us;64us;18us;65us;19us;66us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;18us;32768us;2us;69us;3us;33us;10us;99us;11us;77us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;1us;32768us;11us;76us;0us;16417us;0us;16418us;1us;32768us;10us;79us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;11us;81us;0us;16419us;1us;32768us;10us;83us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16420us;1us;32768us;10us;86us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16421us;1us;32768us;10us;89us;2us;32768us;32us;110us;39us;109us;1us;32768us;6us;91us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16422us;1us;32768us;10us;94us;2us;32768us;32us;110us;39us;109us;1us;32768us;6us;96us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16423us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16424us;1us;32768us;39us;102us;1us;32768us;8us;103us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16426us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;0us;16427us;0us;16429us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;10us;112us;5us;32768us;11us;113us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;9us;114us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;1us;32768us;11us;116us;1us;32768us;9us;117us;17us;32768us;2us;69us;3us;33us;10us;99us;20us;85us;22us;88us;23us;78us;24us;93us;25us;82us;26us;70us;27us;30us;28us;31us;34us;71us;37us;101us;39us;29us;40us;32us;41us;28us;42us;27us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;11us;13us;14us;16us;18us;24us;26us;28us;46us;55us;57us;75us;84us;85us;86us;87us;92us;94us;95us;97us;99us;104us;105us;106us;107us;110us;111us;112us;113us;131us;133us;134us;135us;136us;137us;138us;143us;148us;155us;163us;164us;165us;175us;185us;194us;204us;214us;224us;234us;244us;254us;264us;273us;283us;293us;302us;311us;329us;347us;365us;383us;401us;419us;437us;455us;473us;491us;509us;527us;545us;564us;566us;567us;568us;570us;575us;577us;578us;580us;598us;599us;601us;619us;620us;622us;625us;627us;645us;646us;648us;651us;653us;671us;689us;690us;708us;709us;711us;713us;731us;749us;767us;768us;786us;787us;788us;793us;795us;801us;803us;821us;823us;825us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;2us;7us;6us;1us;1us;1us;3us;4us;2us;3us;1us;3us;1us;1us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;2us;6us;4us;3us;4us;4us;4us;6us;8us;3us;6us;4us;3us;1us;1us;6us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;4us;4us;5us;5us;6us;6us;7us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;8us;9us;9us;10us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;65535us;16394us;16399us;16400us;65535us;16402us;16403us;16404us;65535us;65535us;16405us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16417us;16418us;65535us;65535us;65535us;16419us;65535us;65535us;16420us;65535us;65535us;16421us;65535us;65535us;65535us;65535us;16422us;65535us;65535us;65535us;65535us;65535us;16423us;65535us;16424us;65535us;65535us;65535us;65535us;65535us;16426us;65535us;16427us;16429us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedProg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedFunDec list in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsp"
                                               _1 
                   )
# 74 "Parser.fsp"
                 : AbSyn.UntypedProg));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunDec list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsp"
                                                 _2 :: _3 
                   )
# 77 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsp"
                                                 _2 :: [] 
                   )
# 78 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 436 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsp"
                                  FunDec (fst _2, _1, _4, _7, snd _2) 
                   )
# 82 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 453 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsp"
                                  FunDec (fst _2, _1, [], _6, snd _2) 
                   )
# 84 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsp"
                                                       AbSyn.Int 
                   )
# 87 "Parser.fsp"
                 : AbSyn.Type));
# 480 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsp"
                                                       AbSyn.Char 
                   )
# 88 "Parser.fsp"
                 : AbSyn.Type));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsp"
                                                       AbSyn.Bool 
                   )
# 89 "Parser.fsp"
                 : AbSyn.Type));
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsp"
                                                       AbSyn.Array _2 
                   )
# 90 "Parser.fsp"
                 : AbSyn.Type));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsp"
                                              Param (fst _2, _1) :: _4 
                   )
# 94 "Parser.fsp"
                 : 'gentype_Params));
# 529 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsp"
                                              Param (fst _2, _1) :: [] 
                   )
# 95 "Parser.fsp"
                 : 'gentype_Params));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_LetDecl in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_LetDecls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsp"
                                                             _1 :: _3 
                   )
# 98 "Parser.fsp"
                 : 'gentype_LetDecls));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_LetDecl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsp"
                                                            [_1] 
                   )
# 99 "Parser.fsp"
                 : 'gentype_LetDecls));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsp"
                                           (_1, _3) 
                   )
# 102 "Parser.fsp"
                 : 'gentype_LetDecl));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsp"
                                            Constant (IntVal (fst _1), snd _1) 
                   )
# 109 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> char * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsp"
                                            Constant (CharVal (fst _1), snd _1) 
                   )
# 110 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 600 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsp"
                                            Var _1 
                   )
# 111 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsp"
                                            Constant (BoolVal true, _1) 
                   )
# 112 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsp"
                                            Constant (BoolVal false, _1) 
                   )
# 113 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 633 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsp"
                                            StringLit _1 
                   )
# 114 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 644 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp list in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsp"
                                            ArrayLit (_2, (), _1) 
                   )
# 116 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 657 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsp"
                                            Plus (_1, _3, _2) 
                   )
# 117 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 670 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsp"
                                            Minus(_1, _3, _2) 
                   )
# 118 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 683 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsp"
                                            Times(_1, _3, _2) 
                   )
# 119 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 696 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsp"
                                             Divide(_1, _3, _2) 
                   )
# 120 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 709 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsp"
                                          Equal(_1, _3, _2) 
                   )
# 121 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsp"
                                          Less (_1, _3, _2) 
                   )
# 122 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 735 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsp"
                                          And (_1, _3, _2) 
                   )
# 123 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsp"
                                         Or (_1, _3, _2) 
                   )
# 124 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 761 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsp"
                                     Negate (_2, _1) 
                   )
# 125 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 773 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsp"
                                     Not (_2, _1) 
                   )
# 126 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 785 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsp"
                                            If (_2, _4, _6, _1) 
                   )
# 128 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 801 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsp"
                                            Apply (fst _1, _3, snd _1) 
                   )
# 130 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 815 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsp"
                                            Apply (fst _1, [], snd _1) 
                   )
# 131 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 828 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.Type in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsp"
                                            Read (_3, _1) 
                   )
# 133 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 842 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsp"
                                            Write (_3, (), _1) 
                   )
# 135 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 856 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsp"
                                            Iota (_3, _1) 
                   )
# 137 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 870 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsp"
                                            Map (_3, _5, (), (), _1) 
                   )
# 139 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 886 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            let _8 = parseState.GetInput(8) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsp"
                                            Reduce (_3, _5, _7, (), _1) 
                   )
# 141 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 904 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsp"
                                            _2 
                   )
# 142 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 917 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsp"
                                            Let (Dec (fst _2, _4, _3), _6, _1) 
                   )
# 145 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 933 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsp"
                                            Index (fst _1, _3, (), _2) 
                   )
# 147 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 947 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsp"
                                             _1 :: _3 
                   )
# 150 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 960 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsp"
                                             _1 :: [] 
                   )
# 151 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 971 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsp"
                                      FunName (fst _1 ) 
                   )
# 154 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 982 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsp"
                                      Lambda (_2, [], _6, _1) 
                   )
# 156 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 998 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsp"
                                      Lambda (_2, _4, _7, _1) 
                   )
# 158 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
|]
# 1016 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.UntypedProg =
    engine lexer lexbuf 0 :?> _
